openapi: 3.0.0
info:
  title: User API
  description: User management API endpoints
  version: 1.0.0

paths:
  /users:
    post:
      summary: Create a new user
      description: Create a new user in the system
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '409':
          description: Email already taken
    get:
      summary: Get all users
      description: Get a list of all users with pagination
      tags:
        - Users
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter by user name
        - in: query
          name: role
          schema:
            type: string
          description: Filter by role
        - in: query
          name: sortBy
          schema:
            type: string
          description: Sort by field (format - field:desc/asc)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Maximum number of results per page
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                  totalResults:
                    type: integer

  /users/{userId}:
    get:
      summary: Get a user
      description: Get user information by ID
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      summary: Update a user
      description: Update user information
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found
    delete:
      summary: Delete a user
      description: Delete a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /users/{userId}/roles:
    post:
      summary: Set user roles
      description: Assign roles to a user
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleIds:
                  type: array
                  items:
                    type: string
              required:
                - roleIds
      responses:
        '200':
          description: Roles assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found

components:
  schemas:
    UserInput:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string
        roleId:
          type: string
      required:
        - email
        - password
        - name
        - roleId

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        isEmailVerified:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
